spring:
  profiles:
    active:
      - local
#    include: common

---
spting:
  profile: common

spring:
  application:
    name: auth
  datasource:
    url: ${JDBC_DATABASE_URL:}
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10

server:
  port: ${PORT:5004}
  context-path: /auth
  session:
    cookie:
      name: OAUTH2SESSION # This is to prevent cookie clash with other service as they run on the same host and context path

security:
  user:
    password: 12345678
  oauth2:
    client:
      client-id: oauth2_client
      client-secret: oauth2_client_secret
      scope: read, write
      auto-approve-scopes: .*
      authorized-grant-types: authorization_code,refresh_token,password,client_credentials,implicit
      authenticationScheme: header
    authorization:
      check-token-access: permitAll()


#security:
#  user:
#    password: 12345678
#  basic:
#    enabled: false
#  oauth2:
#    setclient:
#      client-id: oauth2_client
#      client-secret: oauth2_client_secret
#      scope: read, write
#      auto-approve-scopes: .*
#      authorized-grant-types: authorization_code
#    authorization:
#      check-token-access: permitAll()

logging:
  level:
    org.springframework.security: DEBUG
    nodomain.stswoon: DEBUG

createTestData: true
spring.jpa.show-sql: true

---
spting:
  profile: cloud

eureka:
  instance:
      #leaseRenewalIntervalInSeconds: 10
      #securePortEnabled: true
      #metadataMap:
      #    instanceId: ${spring.application.login}:${spring.application.instance_id:${server.port}}
  client:
    #registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: ${EUREKA:http://localhost:5000/eureka/}
#ribbon.IsSecure: true
#management.security.enabled: false

---
spring:
  profile: local
#  include: common

spring.jpa.properties.hibernate.dialect: nodomain.stswoon.financemanager.auth.config.SQLiteDialect
spring.jpa.hibernate.ddl-auto: create-drop
